//-*- C++ -*-
// Register definitions for the registers listed in user_regs_struct
//
// Copyright (C) 2019 Vasileios Porpodas <v.porpodas at gmail.com>
//
// This file is part of ZOFI.
//
// ZOFI is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// GCC is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
// You should have received a copy of the GNU General Public License
// along with GCC; see the file LICENSE.  If not see
// <http://www.gnu.org/licenses/>.

// Map the register strings provided by capstone (arch/X86/X86Mapping.c)
// with the address in gpregs/fpregs (/usr/include/sys/user.h)
// Size in bits found in capstone/arch/X86/X86Mapping.c


// General purpose registers
//
//       Name,    Ptr in gpregs, StartBit, Bits
// --------------------------------------------
DEF_REG(r8,       &gpregs.r8,  0, 64) // 64 bits
DEF_REG(r8d,      &gpregs.r8,  0, 32) // 32 bits
DEF_REG(r8w,      &gpregs.r8,  0, 16) // 16 bits
DEF_REG(r8b,      &gpregs.r8,  0,  8) //  8 bits

DEF_REG(r9,       &gpregs.r9,  0, 64) // 64 bits
DEF_REG(r9d,      &gpregs.r9,  0, 32) // 32 bits
DEF_REG(r9w,      &gpregs.r9,  0, 16) // 16 bits
DEF_REG(r9b,      &gpregs.r9,  0,  8) //  8 bits

DEF_REG(r10,      &gpregs.r10, 0, 64) // 64 bits
DEF_REG(r10d,     &gpregs.r10, 0, 32) // 32 bits
DEF_REG(r10w,     &gpregs.r10, 0, 16) // 16 bits
DEF_REG(r10b,     &gpregs.r10, 0,  8) //  8 bits

DEF_REG(r11,      &gpregs.r11, 0, 64) // 64 bits
DEF_REG(r11d,     &gpregs.r11, 0, 32) // 32 bits
DEF_REG(r11w,     &gpregs.r11, 0, 16) // 16 bits
DEF_REG(r11b,     &gpregs.r11, 0,  8) //  8 bits

DEF_REG(r12,      &gpregs.r12, 0, 64) // 64 bits
DEF_REG(r12d,     &gpregs.r12, 0, 32) // 32 bits
DEF_REG(r12w,     &gpregs.r12, 0, 16) // 16 bits
DEF_REG(r12b,     &gpregs.r12, 0,  8) //  8 bits

DEF_REG(r13,      &gpregs.r13, 0, 64) // 64 bits
DEF_REG(r13d,     &gpregs.r13, 0, 32) // 32 bits
DEF_REG(r13w,     &gpregs.r13, 0, 16) // 16 bits
DEF_REG(r13b,     &gpregs.r13, 0,  8) //  8 bits

DEF_REG(r14,      &gpregs.r14, 0, 64) // 64 bits
DEF_REG(r14d,     &gpregs.r14, 0, 32) // 32 bits
DEF_REG(r14w,     &gpregs.r14, 0, 16) // 16 bits
DEF_REG(r14b,     &gpregs.r14, 0,  8) //  8 bits

DEF_REG(r15,      &gpregs.r15, 0, 64) // 64 bits
DEF_REG(r15d,     &gpregs.r15, 0, 32) // 32 bits
DEF_REG(r15w,     &gpregs.r15, 0, 16) // 16 bits
DEF_REG(r15b,     &gpregs.r15, 0,  8) //  8 bits

DEF_REG(rbp,      &gpregs.rbp, 0, 64)
DEF_REG(ebp,      &gpregs.rbp, 0, 32)
DEF_REG(bp,       &gpregs.rbp, 0, 16)
DEF_REG(bpl,      &gpregs.rbp, 0,  8)
DEF_REG(bph,      &gpregs.rbp, 8,  8) // Start at bit 8

DEF_REG(rax,      &gpregs.rax, 0, 64)
DEF_REG(eax,      &gpregs.rax, 0, 32)
DEF_REG(ax,       &gpregs.rax, 0, 16)
DEF_REG(al,       &gpregs.rax, 0,  8)
DEF_REG(ah,       &gpregs.rax, 8,  8) // Start at bit 8

DEF_REG(rbx,      &gpregs.rbx, 0, 64)
DEF_REG(ebx,      &gpregs.rbx, 0, 32)
DEF_REG(bx,       &gpregs.rbx, 0, 16)
DEF_REG(bl,       &gpregs.rbx, 0,  8)
DEF_REG(bh,       &gpregs.rbx, 8,  8) // Start at bit 8

DEF_REG(rcx,      &gpregs.rcx, 0, 64)
DEF_REG(ecx,      &gpregs.rcx, 0, 32)
DEF_REG(cx,       &gpregs.rcx, 0, 16)
DEF_REG(cl,       &gpregs.rcx, 0,  8)
DEF_REG(ch,       &gpregs.rcx, 8,  8) // Start at bit 8

DEF_REG(rdx,      &gpregs.rdx, 0, 64)
DEF_REG(edx,      &gpregs.rdx, 0, 32)
DEF_REG(dx,       &gpregs.rdx, 0, 16)
DEF_REG(dl,       &gpregs.rdx, 0,  8)
DEF_REG(dh,       &gpregs.rdx, 8,  8) // Start at bit 8

DEF_REG(rdi,      &gpregs.rdi, 0, 64)
DEF_REG(edi,      &gpregs.rdi, 0, 32)
DEF_REG(di,       &gpregs.rdi, 0, 16)
DEF_REG(dil,      &gpregs.rdi, 0,  8)
DEF_REG(dih,      &gpregs.rdi, 8,  8) // Start at bit 8

DEF_REG(rsi,      &gpregs.rsi, 0, 64)
DEF_REG(esi,      &gpregs.rsi, 0, 32)
DEF_REG(si,       &gpregs.rsi, 0, 16)
DEF_REG(sil,      &gpregs.rsi, 0,  8)
DEF_REG(sih,      &gpregs.rsi, 8,  8) // Start at bit 8

DEF_REG(rsp,      &gpregs.rsp, 0, 64)
DEF_REG(esp,      &gpregs.rsp, 0, 32)
DEF_REG(sp,       &gpregs.rsp, 0, 16)
DEF_REG(spl,      &gpregs.rsp, 0,  8)

DEF_REG(orig_rax, &gpregs.orig_rax, 0, 64)

DEF_REG(rip,      &gpregs.rip, 0, 64)
DEF_REG(eip,      &gpregs.rip, 0, 32)
DEF_REG(ip,       &gpregs.rip, 0, 16)

DEF_REG(cs,       &gpregs.cs, 0, 16)
DEF_REG(eflags,   &gpregs.eflags, 0, 32)
DEF_REG(flags,    &gpregs.eflags, 0, 16)
DEF_REG(rflags,   &gpregs.eflags, 0, 64)
DEF_REG(ss,       &gpregs.ss, 0, 16)
DEF_REG(fs_base,  &gpregs.fs_base, 0, 16) // Bits?
DEF_REG(gs_base,  &gpregs.gs_base, 0, 16) // Bits?
DEF_REG(ds,       &gpregs.ds, 0, 16)
DEF_REG(es,       &gpregs.es, 0, 16)
DEF_REG(fs,       &gpregs.fs, 0, 16)
DEF_REG(gs,       &gpregs.gs, 0, 16)


DEF_REG(cwd,       &vecregs.xsave.legacy_fsave_fcw[0], 0, 16)
DEF_REG(swd,       &vecregs.xsave.legacy_fsave_fsw[0], 0, 16)
DEF_REG(ftw,       &vecregs.xsave.legacy_fsave_ftw[0], 0, 16)
DEF_REG(fop,       &vecregs.xsave.legacy_fsave_fop[0], 0, 16)
DEF_REG(fp_rip,    &vecregs.xsave.legacy_fsave_fip[0], 0, 64)
DEF_REG(rdp,       &vecregs.xsave.legacy_fsave_fdp[0], 0, 64)
DEF_REG(mxcsr,     &vecregs.xsave.legacy_fsave_mxcsr[0], 0, 32)
DEF_REG(mxcr_mask, &vecregs.xsave.legacy_fsave_mxcsr_mask[0], 0, 32)

DEF_REG(st(0), &vecregs.xsave.legacy_mm_0to7[0][0], 0, 80)
DEF_REG(st(1), &vecregs.xsave.legacy_mm_0to7[1][0], 0, 80)
DEF_REG(st(2), &vecregs.xsave.legacy_mm_0to7[2][0], 0, 80)
DEF_REG(st(3), &vecregs.xsave.legacy_mm_0to7[3][0], 0, 80)
DEF_REG(st(4), &vecregs.xsave.legacy_mm_0to7[4][0], 0, 80)
DEF_REG(st(5), &vecregs.xsave.legacy_mm_0to7[5][0], 0, 80)
DEF_REG(st(6), &vecregs.xsave.legacy_mm_0to7[6][0], 0, 80)
DEF_REG(st(7), &vecregs.xsave.legacy_mm_0to7[7][0], 0, 80)

DEF_REG(mm0,   &vecregs.xsave.legacy_mm_0to7[0][0], 0, 64)
DEF_REG(mm1,   &vecregs.xsave.legacy_mm_0to7[1][0], 0, 64)
DEF_REG(mm2,   &vecregs.xsave.legacy_mm_0to7[2][0], 0, 64)
DEF_REG(mm3,   &vecregs.xsave.legacy_mm_0to7[3][0], 0, 64)
DEF_REG(mm4,   &vecregs.xsave.legacy_mm_0to7[4][0], 0, 64)
DEF_REG(mm5,   &vecregs.xsave.legacy_mm_0to7[5][0], 0, 64)
DEF_REG(mm6,   &vecregs.xsave.legacy_mm_0to7[6][0], 0, 64)
DEF_REG(mm7,   &vecregs.xsave.legacy_mm_0to7[7][0], 0, 64)

DEF_REG(fp0,   &vecregs.xsave.legacy_mm_0to7[0][0], 0, 80)
DEF_REG(fp1,   &vecregs.xsave.legacy_mm_0to7[1][0], 0, 80)
DEF_REG(fp2,   &vecregs.xsave.legacy_mm_0to7[2][0], 0, 80)
DEF_REG(fp3,   &vecregs.xsave.legacy_mm_0to7[3][0], 0, 80)
DEF_REG(fp4,   &vecregs.xsave.legacy_mm_0to7[4][0], 0, 80)
DEF_REG(fp5,   &vecregs.xsave.legacy_mm_0to7[5][0], 0, 80)
DEF_REG(fp6,   &vecregs.xsave.legacy_mm_0to7[6][0], 0, 80)
DEF_REG(fp7,   &vecregs.xsave.legacy_mm_0to7[7][0], 0, 80)


DEF_REG(xmm0,  &vecregs.zmm[0][0], 0, 128)
DEF_REG(xmm1,  &vecregs.zmm[1][0], 0, 128)
DEF_REG(xmm2,  &vecregs.zmm[2][0], 0, 128)
DEF_REG(xmm3,  &vecregs.zmm[3][0], 0, 128)
DEF_REG(xmm4,  &vecregs.zmm[4][0], 0, 128)
DEF_REG(xmm5,  &vecregs.zmm[5][0], 0, 128)
DEF_REG(xmm6,  &vecregs.zmm[6][0], 0, 128)
DEF_REG(xmm7,  &vecregs.zmm[7][0], 0, 128)
DEF_REG(xmm8,  &vecregs.zmm[8][0], 0, 128)
DEF_REG(xmm9,  &vecregs.zmm[9][0], 0, 128)
DEF_REG(xmm10, &vecregs.zmm[10][0], 0, 128)
DEF_REG(xmm11, &vecregs.zmm[11][0], 0, 128)
DEF_REG(xmm12, &vecregs.zmm[12][0], 0, 128)
DEF_REG(xmm13, &vecregs.zmm[13][0], 0, 128)
DEF_REG(xmm14, &vecregs.zmm[14][0], 0, 128)
DEF_REG(xmm15, &vecregs.zmm[15][0], 0, 128)
DEF_REG(xmm16, &vecregs.zmm[16][0], 0, 128)
DEF_REG(xmm17, &vecregs.zmm[17][0], 0, 128)
DEF_REG(xmm18, &vecregs.zmm[18][0], 0, 128)
DEF_REG(xmm19, &vecregs.zmm[19][0], 0, 128)
DEF_REG(xmm20, &vecregs.zmm[20][0], 0, 128)
DEF_REG(xmm21, &vecregs.zmm[21][0], 0, 128)
DEF_REG(xmm22, &vecregs.zmm[22][0], 0, 128)
DEF_REG(xmm23, &vecregs.zmm[23][0], 0, 128)
DEF_REG(xmm24, &vecregs.zmm[24][0], 0, 128)
DEF_REG(xmm25, &vecregs.zmm[25][0], 0, 128)
DEF_REG(xmm26, &vecregs.zmm[26][0], 0, 128)
DEF_REG(xmm27, &vecregs.zmm[27][0], 0, 128)
DEF_REG(xmm28, &vecregs.zmm[28][0], 0, 128)
DEF_REG(xmm29, &vecregs.zmm[29][0], 0, 128)
DEF_REG(xmm30, &vecregs.zmm[30][0], 0, 128)
DEF_REG(xmm31, &vecregs.zmm[31][0], 0, 128)



DEF_REG(ymm0, &vecregs.zmm[0][0], 0, 256)
DEF_REG(ymm1, &vecregs.zmm[1][0], 0, 256)
DEF_REG(ymm2, &vecregs.zmm[2][0], 0, 256)
DEF_REG(ymm3, &vecregs.zmm[3][0], 0, 256)
DEF_REG(ymm4, &vecregs.zmm[4][0], 0, 256)
DEF_REG(ymm5, &vecregs.zmm[5][0], 0, 256)
DEF_REG(ymm6, &vecregs.zmm[6][0], 0, 256)
DEF_REG(ymm7, &vecregs.zmm[7][0], 0, 256)
DEF_REG(ymm8, &vecregs.zmm[8][0], 0, 256)
DEF_REG(ymm9, &vecregs.zmm[9][0], 0, 256)
DEF_REG(ymm10, &vecregs.zmm[10][0], 0, 256)
DEF_REG(ymm11, &vecregs.zmm[11][0], 0, 256)
DEF_REG(ymm12, &vecregs.zmm[12][0], 0, 256)
DEF_REG(ymm13, &vecregs.zmm[13][0], 0, 256)
DEF_REG(ymm14, &vecregs.zmm[14][0], 0, 256)
DEF_REG(ymm15, &vecregs.zmm[15][0], 0, 256)
DEF_REG(ymm16, &vecregs.zmm[16][0], 0, 256)
DEF_REG(ymm17, &vecregs.zmm[17][0], 0, 256)
DEF_REG(ymm18, &vecregs.zmm[18][0], 0, 256)
DEF_REG(ymm19, &vecregs.zmm[19][0], 0, 256)
DEF_REG(ymm20, &vecregs.zmm[20][0], 0, 256)
DEF_REG(ymm21, &vecregs.zmm[21][0], 0, 256)
DEF_REG(ymm22, &vecregs.zmm[22][0], 0, 256)
DEF_REG(ymm23, &vecregs.zmm[23][0], 0, 256)
DEF_REG(ymm24, &vecregs.zmm[24][0], 0, 256)
DEF_REG(ymm25, &vecregs.zmm[25][0], 0, 256)
DEF_REG(ymm26, &vecregs.zmm[26][0], 0, 256)
DEF_REG(ymm27, &vecregs.zmm[27][0], 0, 256)
DEF_REG(ymm28, &vecregs.zmm[28][0], 0, 256)
DEF_REG(ymm29, &vecregs.zmm[29][0], 0, 256)
DEF_REG(ymm30, &vecregs.zmm[30][0], 0, 256)
DEF_REG(ymm31, &vecregs.zmm[31][0], 0, 256)


DEF_REG(zmm0,  &vecregs.zmm[0][0], 0, 512)
DEF_REG(zmm1,  &vecregs.zmm[1][0], 0, 512)
DEF_REG(zmm2,  &vecregs.zmm[2][0], 0, 512)
DEF_REG(zmm3,  &vecregs.zmm[3][0], 0, 512)
DEF_REG(zmm4,  &vecregs.zmm[4][0], 0, 512)
DEF_REG(zmm5,  &vecregs.zmm[5][0], 0, 512)
DEF_REG(zmm6,  &vecregs.zmm[6][0], 0, 512)
DEF_REG(zmm7,  &vecregs.zmm[7][0], 0, 512)
DEF_REG(zmm8,  &vecregs.zmm[8][0], 0, 512)
DEF_REG(zmm9,  &vecregs.zmm[9][0], 0, 512)
DEF_REG(zmm10, &vecregs.zmm[10][0], 0, 512)
DEF_REG(zmm11, &vecregs.zmm[11][0], 0, 512)
DEF_REG(zmm12, &vecregs.zmm[12][0], 0, 512)
DEF_REG(zmm13, &vecregs.zmm[13][0], 0, 512)
DEF_REG(zmm14, &vecregs.zmm[14][0], 0, 512)
DEF_REG(zmm15, &vecregs.zmm[15][0], 0, 512)
DEF_REG(zmm16, &vecregs.zmm[16][0], 0, 512)
DEF_REG(zmm17, &vecregs.zmm[17][0], 0, 512)
DEF_REG(zmm18, &vecregs.zmm[18][0], 0, 512)
DEF_REG(zmm19, &vecregs.zmm[19][0], 0, 512)
DEF_REG(zmm20, &vecregs.zmm[20][0], 0, 512)
DEF_REG(zmm21, &vecregs.zmm[21][0], 0, 512)
DEF_REG(zmm22, &vecregs.zmm[22][0], 0, 512)
DEF_REG(zmm23, &vecregs.zmm[23][0], 0, 512)
DEF_REG(zmm24, &vecregs.zmm[24][0], 0, 512)
DEF_REG(zmm25, &vecregs.zmm[25][0], 0, 512)
DEF_REG(zmm26, &vecregs.zmm[26][0], 0, 512)
DEF_REG(zmm27, &vecregs.zmm[27][0], 0, 512)
DEF_REG(zmm28, &vecregs.zmm[28][0], 0, 512)
DEF_REG(zmm29, &vecregs.zmm[29][0], 0, 512)
DEF_REG(zmm30, &vecregs.zmm[30][0], 0, 512)
DEF_REG(zmm31, &vecregs.zmm[31][0], 0, 512)


// Unsupported registers. These are skipped as they are not available to ptrace.
DEF_REG(riz,      nullptr, 0, 64)
DEF_REG(eiz,      nullptr, 0, 32)
DEF_REG(fpsw,     nullptr, 0, 80)

DEF_REG(cr0,      nullptr, 0, 64)
DEF_REG(cr1,      nullptr, 0, 64)
DEF_REG(cr2,      nullptr, 0, 64)
DEF_REG(cr3,      nullptr, 0, 64)
DEF_REG(cr4,      nullptr, 0, 64)
DEF_REG(cr5,      nullptr, 0, 64)
DEF_REG(cr6,      nullptr, 0, 64)
DEF_REG(cr7,      nullptr, 0, 64)
DEF_REG(cr8,      nullptr, 0, 64)
DEF_REG(cr9,      nullptr, 0, 64)
DEF_REG(cr10,     nullptr, 0, 64)
DEF_REG(cr11,     nullptr, 0, 64)
DEF_REG(cr12,     nullptr, 0, 64)
DEF_REG(cr13,     nullptr, 0, 64)
DEF_REG(cr14,     nullptr, 0, 64)
DEF_REG(cr15,     nullptr, 0, 64)

DEF_REG(dr0,      nullptr, 0, 64)
DEF_REG(dr1,      nullptr, 0, 64)
DEF_REG(dr2,      nullptr, 0, 64)
DEF_REG(dr3,      nullptr, 0, 64)
DEF_REG(dr4,      nullptr, 0, 64)
DEF_REG(dr5,      nullptr, 0, 64)
DEF_REG(dr6,      nullptr, 0, 64)
DEF_REG(dr7,      nullptr, 0, 64)
DEF_REG(dr8,      nullptr, 0, 64)
DEF_REG(dr9,      nullptr, 0, 64)
DEF_REG(dr10,     nullptr, 0, 64)
DEF_REG(dr11,     nullptr, 0, 64)
DEF_REG(dr12,     nullptr, 0, 64)
DEF_REG(dr13,     nullptr, 0, 64)
DEF_REG(dr14,     nullptr, 0, 64)
DEF_REG(dr15,     nullptr, 0, 64)

DEF_REG(k0,       &vecregs.xsave.opmask_0to7[0][0], 0, 64)
DEF_REG(k1,       &vecregs.xsave.opmask_0to7[1][0], 0, 64)
DEF_REG(k2,       &vecregs.xsave.opmask_0to7[2][0], 0, 64)
DEF_REG(k3,       &vecregs.xsave.opmask_0to7[3][0], 0, 64)
DEF_REG(k4,       &vecregs.xsave.opmask_0to7[4][0], 0, 64)
DEF_REG(k5,       &vecregs.xsave.opmask_0to7[5][0], 0, 64)
DEF_REG(k6,       &vecregs.xsave.opmask_0to7[6][0], 0, 64)
DEF_REG(k7,       &vecregs.xsave.opmask_0to7[7][0], 0, 64)
